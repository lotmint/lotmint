apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "conode.fullname" . }}
  labels:
    app: {{ include "conode.name" . }}
    chart: {{ include "conode.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ include "conode.name" . }}
      release: {{ .Release.Name }}
  replicas: 1
  serviceName: {{ template "conode.fullname" . }}-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ include "conode.name" . }}
        release: {{ .Release.Name }}
      annotations:
        checksum/config: {{ include (print .Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print .Template.BasePath "/secret.yaml") . | sha256sum }}
    spec:
      initContainers:
        - name: conode-setup
          image: "debian:latest"
          imagePullPolicy: Always
          command:
            - bash
            - /config/setup.sh
          volumeMounts:
            - name: config
              mountPath: /config
            - name: secret
              mountPath: /secret
            - name: data
              mountPath: /data
      containers:
        - name: conode
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: tcp1
              containerPort: {{ .Values.service.ports.tcp1 }}
              protocol: TCP
            - name: tcp2
              containerPort: {{ .Values.service.ports.tcp2 }}
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: tcp1
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: tcp1
            initialDelaySeconds: 15
            periodSeconds: 20
          volumeMounts:
            - name: data
              mountPath: /conode_data
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ template "conode.fullname" . }}
        - name: secret
          secret:
            secretName: {{ template "conode.fullname" . }}
        {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
      {{- if .Values.persistence.storageClass }}
        {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .Values.persistence.storageClass }}"
        {{- end }}
      {{- end }}
  {{- end }}
